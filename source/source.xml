<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<book xmlns="http://docbook.org/ns/docbook" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  version="5.0">
  <info>
    <title>transpect.github.io</title>
    <!-- 
      part      ...   left nav-bar entry
      chapter   ...   left nav-bar subentry (only multiple chapters become subentries)
      section   ...   right table of contents
      appendix  ...   becomes footer?
    -->
  </info>
  <part>
    <title>About</title>
    <chapter xml:base="../index.html">
      <title>transpect</title>
      <subtitle>An open source framework for converting and checking data</subtitle>
      <para role="col">Transpect was designed to provide generic and stable modules for common conversion and checking
        tasks. To adress complex and diverse data, transpect offers a cascading configuration to override specific
        transformation and checking rules. Each component within the framework is Open Source and use standard
        technologies such as XSLT 2.0 and XProc.</para>
      <section>
        <title>Data Conversion</title>
        <para>Transpect offers many modules to parse and convert a wide range of XML-based formats such as DOCX, IDML,
          EPUB, NLM JATS/BITS and TEI. Additionally, there exist tools for converting text-based formats such as CSS and
          LaTeX as well as extensions, e. g., in order to check PDF and image files. The following list of supported
          formats makes no claim to be comprehensive.</para>
        <informaltable>
          <thead>
            <tr>
              <td>Format</td>
              <td>Parse</td>
              <td>Generate</td>
              <td>Remark</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>EPUB 2/3</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>including Landmarks, Fixed Layout, Media Overlays, Structural Semantics Vocabulary</td>
            </tr>
            <tr>
              <td>HTML, CSS</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>including conversion from CSS to CSSa</td>
            </tr>
            <tr>
              <td>Images</td>
              <td>&#x2713;</td>
              <td>–</td>
              <td>extract technical metadata, conversion is possible with 3rd-party software</td>
            </tr>
            <tr>
              <td>InDesign Markup Language (IDML)</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>Styles are retained as CSSa. Generation is limited to one main story yet.</td>
            </tr>
            <tr>
              <td>Math (MathML, OMML, LaTeX)</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>parsing MathType is possible with 3rd-party extensions</td>
            </tr>
            <tr>
              <td>Office Open XML, OpenDocument (ODT)</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
              <td>Styles are retained as CSSa. Some OOXML are not supported yet but are retained (SmartArts,
                Drawings)</td>
            </tr>
            <tr>
              <td>XML formats, e.g. DocBook, NLM JATS/BITS/HoBots, TEI</td>
              <td>&#x2713;</td>
              <td>&#x2713;</td>
            </tr>
            <tr>
              <td>PDF</td>
              <td>–</td>
              <td>&#x2713;</td>
              <td>parsing is possible with 3rd-party extensions but limited due to the nature of the format</td>
            </tr>
          </tbody>
        </informaltable>
        <para>Many converters generate the intermediate format Hub XML. Hub XML is a DocBook 5.1 derivative that allows
          for documents that lack a proper section hierarchy and uses CSSa for expressing layout information. It is used
          as a common intermediate format to represent raw conversion results of, for example, OOXML, ODT, and IDML
          documents.</para>
      </section>
      <section>
        <title>Checking Data</title>
        <para>Transpect implements Schematron and Schema validation. Furthermore, many modules integrate error detection
          and recovery methods. Reports are stored as Schematron SVRL document. The report messages can be displayed in
          an HTML view of the document at the error location. </para>
      </section>
      <section>
        <title>Configuration Cascade</title>
        <para>Default transformation and checking rules (XSLT, Schematron, CSS, …) may be superseded with specific
          rules. These rules specified according to the group of content that the input belongs to, for example per
          company, per production-line, or per product.</para>
      </section>
      <section>
        <title>Open Source</title>
        <para>Transpect is published under the BSD 2-clause license, also known as FreeBSD License. This permissive
          license imposes minimal restrictions on the redistribution of the software. Therefore you can use the software
          in commercial and even in closed source projects.</para>
        <para> The license terms can be found here: <link xlink:href="http://opensource.org/licenses/BSD-2-Clause"
            >http://opensource.org/licenses/BSD-2-Clause</link>
        </para>
      </section>
      <section>
        <title>Industry Standards</title>
        <para>The technologies behind transpect are industry standards like XProc, XSLT 2.0 and Schematron. Their
          specifications are publicly available through international standards organizations such as W3C and
          ISO.</para>
        <informaltable>
          <tbody>
            <tr>
              <th>XProc</th>
              <td>A language to specify a sequence of operations to be performed on XML documents.</td>
            </tr>
            <tr>
              <th>XSLT 2.0</th>
              <td>XSLT is a programming language for the purpose of transforming XML documents. Due to several
                limitations of version 1.0, we recommend to use XSLT 2.0</td>
            </tr>
            <tr>
              <th>Schematron</th>
              <td>A rule-based schema language to validate XML documents.</td>
            </tr>
            <tr>
              <th>RelaxNG</th>
              <td>RelaxNG is an XML schema language to specify patterns for the structure of an XML document.</td>
            </tr>
          </tbody>
        </informaltable>
      </section>
      <section>
        <title>le-tex</title>
        <para>Transpect is developed and maintained by le-tex, a Leipzig-based company which provides professional
          services for publishers.</para>
      </section>
    </chapter>
  </part>
  <part>
    <title>Getting Started</title>
    <chapter xml:base="../getting-started.html">
      <title>Getting Started</title>
      <subtitle>Learn how to use transpect</subtitle>
      <section>
        <title>Prerequisites</title>
        <para>There are no further prerequisites as are required to run XProc. If you are not familiar with XProc, we
          suggest to work yourself through Roger L. Costello’s <link xlink:href="http://www.xfront.com/xproc/">XProc
            tutorial</link> first.</para>
        <simplesect role="col s12 m6">
          <title>XML Calabash</title>
          <para>We recommend XML Calabash for running transpect’s XProc pipelines. You should use our pre-configured
            version of XML Calabash. It comes with extensions which are essential to some modules.</para>
          <!--<para><link xlink:href="https://github.com/transpect/calabash-frontend/" role="btn red">Get XML Calabash</link></para>-->
        </simplesect>
        <simplesect role="col s12 m6">
          <title>Java</title>
          <para>XML Calabash needs at least Java 1.7 to run. We noticed some odd behaviour while running XML Calabash
            with a JVMs other than Oracle. If you get memory issues, consider to install the 64-bit version.</para>
          <!--<para><link xlink:href="https://www.java.com/en/download/manual.jsp" role="btn red">Get Java</link></para>-->
        </simplesect>
      </section>
      <section>
        <title>Setup</title>
        <bridgehead>Install calabash</bridgehead>
        <para>After downloading, extract XML Calabash into your project directory. We </para>
        <programlisting>
MyProject/
  |--calabash/
  |  |--calabash.sh
  |  |--calabash.bat</programlisting>

      </section>
    </chapter>
  </part>
  <part xml:id="part-modules">
    <title>Modules</title>
    <chapter xml:base="../docx2hub.html">
      <title>docx2hub</title>
      <para>Cati sunte cus eumque et, exceate stendel estrum eiusam qui rem volut velent. Ossum ipit eaqui at volor
        simporeris evelic tectiande cum laccum quis eos moluptat. Harciam et, omni coneces eat pla nus di occatecatis
        samus ut quistendus asit modisqu aspelique nonsequi digent, que nus dit facero officie nectenis estia volorio
        maios iminvelique simet peditis quiassima sust, sitibusame verum nihil in cum ium hictas volo dolo volum aut
        imustiant min nit assimolorit autem quatur sam quamust, od utates vendae enienis santiis dolorat quis sim
        quidelibera dolutam aut acia vellabo reptiossus, voluptur, ut quos sum illendit lat. Onsedite culles alit estem
        el il estore molut omnia nonseni doluptatur am fugit archil ipsaperere conseque parciusa sed ut eos eatqui
        omniendi que porehenis aut qui blab ilitatium fugit aut adis saesciam corro offici in nobis acerum veritaqui
        offictur rest, illiquas dolor aut quiati vendi te offic tem consero quatias andendunt iur, conecume mos
        remquuntur, earum aut officia temquae cora doluptatur? Dia nestis remos seque dis et, coriam sinvelese pa volut
        reperna tibusa non et esequisita aut molo volectatem ut iscit ex et modicim agnaturiam enihil ima dolupitem re
        volut ommodi ut eum hicia doluptae ellatur rescipsus, con nost arcium re dolorum duscim harcium comnimus
        exereptatur, quianducias quaecer ibuscip santius delia quae cupta voluptatur a non porum lanihit reped que
        nectotae pres sam estotati dicae volut aut endi temolor erepeliquia aute consed quod quoditaes qui in cuptatur,
        sitis ni volore dolorit et ullaccus duntius molore, occum aut qui quam ut ut ium de nihil incidebis nimus aci
        nos velibus, omnis vita plaborro con nam expe non consedi tatecus que plit rat laccusdae. Itatem vercit,
        solorunt rectatur aborem fuga. Namust, omnim fugit est, alit, nonsequist, sus, omnimi, sunt, netus aperchil into
        voluptatur molor rerundem rem aut autem. Essunt doluptus asim illuptatis et rerum quodionseque doluptae
        quaectus, susae prorum quis sume doluptatur? Qui cus nonse quas cumquas itatur? Otatessed eatemol enihilitas
        eat. Genditia voloreptat restem atem conse omnim nulparum quaepero berumquo volum dolupti accum re provit, que
        est, con consecus, qui re velest et et volorere possit, consed qui cuptiatat volorro volorem dolecae</para>
    </chapter>
    <chapter xml:base="../idml2hub.html">
      <title>idml2hub</title>
      <para>Cati sunte cus eumque et, exceate stendel estrum eiusam qui rem volut velent. Ossum ipit eaqui at volor
        simporeris evelic tectiande cum laccum quis eos moluptat. Harciam et, omni coneces eat pla nus di occatecatis
        samus ut quistendus asit modisqu aspelique nonsequi digent, que nus dit facero officie nectenis estia volorio
        maios iminvelique simet peditis quiassima sust, sitibusame verum nihil in cum ium hictas volo dolo volum aut
        imustiant min nit assimolorit autem quatur sam quamust, od utates vendae enienis santiis dolorat quis sim
        quidelibera dolutam aut acia vellabo reptiossus, voluptur, ut quos sum illendit lat. Onsedite culles alit estem
        el il estore molut omnia nonseni doluptatur am fugit archil ipsaperere conseque parciusa sed ut eos eatqui
        omniendi que porehenis aut qui blab ilitatium fugit aut adis saesciam corro offici in nobis acerum veritaqui
        offictur rest, illiquas dolor aut quiati vendi te offic tem consero quatias andendunt iur, conecume mos
        remquuntur, earum aut officia temquae cora doluptatur? Dia nestis remos seque dis et, coriam sinvelese pa volut
        reperna tibusa non et esequisita aut molo volectatem ut iscit ex et modicim agnaturiam enihil ima dolupitem re
        volut ommodi ut eum hicia doluptae ellatur rescipsus, con nost arcium re dolorum duscim harcium comnimus
        exereptatur, quianducias quaecer ibuscip santius delia quae cupta voluptatur a non porum lanihit reped que
        nectotae pres sam estotati dicae volut aut endi temolor erepeliquia aute consed quod quoditaes qui in cuptatur,
        sitis ni volore dolorit et ullaccus duntius molore, occum aut qui quam ut ut ium de nihil incidebis nimus aci
        nos velibus, omnis vita plaborro con nam expe non consedi tatecus que plit rat laccusdae. Itatem vercit,
        solorunt rectatur aborem fuga. Namust, omnim fugit est, alit, nonsequist, sus, omnimi, sunt, netus aperchil into
        voluptatur molor rerundem rem aut autem. Essunt doluptus asim illuptatis et rerum quodionseque doluptae
        quaectus, susae prorum quis sume doluptatur? Qui cus nonse quas cumquas itatur? Otatessed eatemol enihilitas
        eat. Genditia voloreptat restem atem conse omnim nulparum quaepero berumquo volum dolupti accum re provit, que
        est, con consecus, qui re velest et et volorere possit, consed qui cuptiatat volorro volorem dolecae</para>
    </chapter>
    <chapter xml:base="../epubtools.html">
      <title>epubtools</title>
      <para>Cati sunte cus eumque et, exceate stendel estrum eiusam qui rem volut velent. Ossum ipit eaqui at volor
        simporeris evelic tectiande cum laccum quis eos moluptat. Harciam et, omni coneces eat pla nus di occatecatis
        samus ut quistendus asit modisqu aspelique nonsequi digent, que nus dit facero officie nectenis estia volorio
        maios iminvelique simet peditis quiassima sust, sitibusame verum nihil in cum ium hictas volo dolo volum aut
        imustiant min nit assimolorit autem quatur sam quamust, od utates vendae enienis santiis dolorat quis sim
        quidelibera dolutam aut acia vellabo reptiossus, voluptur, ut quos sum illendit lat. Onsedite culles alit estem
        el il estore molut omnia nonseni doluptatur am fugit archil ipsaperere conseque parciusa sed ut eos eatqui
        omniendi que porehenis aut qui blab ilitatium fugit aut adis saesciam corro offici in nobis acerum veritaqui
        offictur rest, illiquas dolor aut quiati vendi te offic tem consero quatias andendunt iur, conecume mos
        remquuntur, earum aut officia temquae cora doluptatur? Dia nestis remos seque dis et, coriam sinvelese pa volut
        reperna tibusa non et esequisita aut molo volectatem ut iscit ex et modicim agnaturiam enihil ima dolupitem re
        volut ommodi ut eum hicia doluptae ellatur rescipsus, con nost arcium re dolorum duscim harcium comnimus
        exereptatur, quianducias quaecer ibuscip santius delia quae cupta voluptatur a non porum lanihit reped que
        nectotae pres sam estotati dicae volut aut endi temolor erepeliquia aute consed quod quoditaes qui in cuptatur,
        sitis ni volore dolorit et ullaccus duntius molore, occum aut qui quam ut ut ium de nihil incidebis nimus aci
        nos velibus, omnis vita plaborro con nam expe non consedi tatecus que plit rat laccusdae. Itatem vercit,
        solorunt rectatur aborem fuga. Namust, omnim fugit est, alit, nonsequist, sus, omnimi, sunt, netus aperchil into
        voluptatur molor rerundem rem aut autem. Essunt doluptus asim illuptatis et rerum quodionseque doluptae
        quaectus, susae prorum quis sume doluptatur? Qui cus nonse quas cumquas itatur? Otatessed eatemol enihilitas
        eat. Genditia voloreptat restem atem conse omnim nulparum quaepero berumquo volum dolupti accum re provit, que
        est, con consecus, qui re velest et et volorere possit, consed qui cuptiatat volorro volorem dolecae</para>
    </chapter>
  </part>
  <part>
    <title>Styleguide</title>
    <chapter xml:base="../styleguide.html">
      <title>Styleguide</title>
      <subtitle>Guidelines for writing XProc, XSLT, XPath…</subtitle>
      <section>
        <title>General</title>
        <itemizedlist>
          <listitem>
            <para>Use <code>UTF-8</code> encoding</para>
          </listitem>
          <listitem>
            <para>Use soft-tabs with a two space indent</para>
          </listitem>
          <listitem>
            <para>Keep lines fewer than 80 characters</para>
          </listitem>
          <listitem>
            <para>Use spaces around operators, after commas, colons and semicolons</para>
          </listitem>
          <listitem>
            <para>Leave a blank newline at the end of each file</para>
          </listitem>
          <listitem>
            <para>Comment your code extensively and use always speaking variable names. </para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Repository</title>
        <section>
          <title>SVN Externals&#x2009;/&#x2009;Git Submodules</title>
          <itemizedlist>
            <listitem>
              <para>Always include SVN externals or Git submodules at the root of your repository.</para>
            </listitem>
            <listitem>
              <para>Use SVN externals or Git submodules only in your frontend project and not in libraries.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>XML Catalogs</title>
          <itemizedlist>
            <listitem>
              <para>Include an XML catalog to your repository. The path of your catalog should be
                  <filename>xmlcatalog/catalog.xml</filename></para>
            </listitem>
            <listitem>
              <para>The catalog file must include a <code>rewriteURI</code> statement which identifies the repository
                with a URI.</para>
              <programlisting><code role="language-markup">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog"&gt;
  
  &lt;rewriteURI uriStartString="http://transpect.io/docx2hub/" 
              rewritePrefix="../"&gt;
  
&lt;/catalog&gt;</code></programlisting>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>Paths</title>
          <para>The code should be stored separated by code language. The directory name identifies the typical file
            extension of the code file. Always use common file extensions, such as <filename>xpl</filename> for XProc
            pipelines and <filename>xsl</filename> for XSLT Stylesheets.</para>
          <programlisting>
myproject/
  |--css
  |  |--stylesheet.css
  |--xmlcatalog/
  |  |--catalog.xml
  |--xpl
  |  |--myproject.xpl
  |--xsl
  |  |--myproject.xsl
</programlisting>
        </section>
      </section>
      <section>
        <title>XProc</title>
        <itemizedlist>
          <listitem>
            <para>Encapsulate commonly used functionality into components with <code>p:import</code> and
                <code>p:declare-step</code>. Add <code>name</code> and <code>type</code> attributes to each
                <code>p:declare-step</code> to make it accessible from inside and outside of the pipeline</para>
          </listitem>
          <listitem>
            <para>Avoid too many nested <code>p:choose</code> if possible. A proper XSLT is many times a better option
              to encapsulate application logic.</para>
          </listitem>
          <listitem>
            <para>Use <code>p:documentation</code> tags to explain what your pipeline does.</para>
          </listitem>
          <listitem>
            <para>Provide debugging features and console output in your pipeline, e.g. via <code>tr:store-debug</code>
              or <code>cx:message</code></para>
          </listitem>
          <listitem>
            <para>We encourage you to use the <code>cx:depends-on</code> attribute for declaring step order explicitely.
              This is needed when you want to use steps which operate with files.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>XSLT</title>
        <itemizedlist>
          <listitem>
            <para>Avoid too many nested <code>xsl:choose</code> as this will make your code difficult do decipher. Try
              to replace with <code>xsl:template</code> with concrete matching patterns.</para>
          </listitem>
          <listitem>
            <para>Provide a data type for variables via <code>as</code> attribute.</para>
            <programlisting><code role="language-markup">&lt;xsl:variable name="chapter" select="chapter" as="element(chapter)"/&gt;</code></programlisting>
          </listitem>
          <listitem>
            <para>Avoid to call named templates which call named templates and so on. If applicable use functions
              instead.</para>
          </listitem>
          <listitem>
            <para>Use XSLT modes only if technically required and not to separate your code logically. Be careful when
              using XSLT modes accompanied with identity templates as this will cost memory and reduce overall execution
              speed</para>
          </listitem>
          <listitem>
            <para>Use namespace <code>http://transpect.io</code> and prefix <code>tr</code> for custom functions.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>XPath</title>
        <itemizedlist>
          <listitem>
            <para>Some XPath expressions force the XML parser to perform deep explorations of the XML tree. If you know
              the expected context, you can reduce CPU and memory usage by avoiding wildcard patterns (<code>*</code>,
                <code>@*</code>) and deep XPath axis requests (<code>ancestor</code>, <code>descendant</code> or
                <code>//*</code>, <code>preceding</code>, <code>following</code>).</para>
          </listitem>
          <listitem>
            <para>If possible, substitute regular expression functions (<code>matches()</code>, <code>replace()</code>, <code>tokenize()</code>)
              with simple string manipulation functions (<code>contains()</code>,
                <code>starts-with()</code>, <code>ends-with()</code>, <code>substring-before()</code>,
                <code>substring-after()</code>, <code>translate()</code></para>
          </listitem>
          <listitem>
            <para>Indent longer conditional statements, loops and nested functions</para>
            <programlisting><code role="language-markup">&lt;xsl:value-of select="if(foo)
                      then foo
                      else if (bar)
                           then bar 
                           else false()"/></code></programlisting>
          </listitem>
          <listitem>
            <para>Comment longer XPath statements: <code>(: my XPath comment :)</code></para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>RelaxNG/XSD</title>
        <para>Use <link xlink:href="http://www.xfront.com/GlobalVersusLocal.html#SecondDesign">Salami Slice
            Design</link> pattern for writing Schemas</para>
      </section>
      <section>
        <title>DTD</title>
        <para>Yo mama use a DTD for her CD catalog.</para>
      </section>
    </chapter>
  </part>
  <part>
    <title>Tutorials</title>
    <chapter xml:base="../tutorial.html">
      <title>Tutorials</title>
      <subtitle>docx→JATS→EPUB</subtitle>
      <section>
        <title>Creating a repository</title>
        <para>A transpect project consists of a specification which modules to use (and in which revision), project-specific
          adaptations, and the modules. The project itself resides in a version control repository (we are using git and svn,
          others will probably work, too). There are at least three ways of setting up a transpect project:</para>
        <itemizedlist>
          <listitem>
            <para>git project with git submodules</para>
            <para>svn project with svn externals (github provides sufficient svn support to make this feasible, even if
              the modules reside in git repositories)</para>
            <para>git, svn (or probably also Mercurial) project with the modules as git or svn externals, using 
              <link xlink:href="http://nopugs.com/ext-tutorial">ext</link></para>
          </listitem>
        </itemizedlist>
        <para>We will focus on the first approach, although git submodules are quite a beast. For people who don’t use
        svn on a regular basis it’s the best choice though.</para>
        <para>Let’s start creating a repository on github. We call it <link 
          xlink:href="https://github.com/transpect/docx2jats-demo">docx2jats-demo</link> and clone it to local:</para>
        <programlisting>git clone https://github.com/transpect/docx2jats-demo.git --recursive</programlisting>
        <annotation>
          <para>You wouldn’t need <parameter>--recursive</parameter> on your first checkout, but for those who intend
        to clone the final project this is helpful already.</para>
        </annotation>
      </section>
      <section>
        <title>Adding Submodules</title>
        <para>We’ll identify the modules that we need (primarily by their name, such as <link 
          xlink:href="https://github.com/transpect/docx2hub">docx2hub</link>, <link 
            xlink:href="https://github.com/transpect/hub2jats">hub2jats</link>, <link 
              xlink:href="https://github.com/transpect/jats2html">jats2html</link>
          or <link xlink:href="https://github.com/transpect/epubtools">epubtools</link>).
        One of the submodules is the XProc processor. In principle, we could rely on an already-installed XML Calabash.
        However, we need some Calabash extensions, a more recent Saxon version than is bundled with Calabash, and compatibility
        assurance. Therefore, we created our own Calabash distribution, usually based on the most recent release, and we add 
        this as a submodule to every project.</para>
        <programlisting>git submodule add https://github.com/transpect/calabash-frontend.git calabash</programlisting>
        <para>The <literal>calabash-frontend</literal> is special in that it includes other submodules. These won’t be checked
          out by default. Therefore you should initialize them recursively:</para>
        <programlisting>git submodule update --init --recursive</programlisting>
        <para>(You can postpone this statement until you have specified all submodules.)</para>
        <annotation>
          <para>If you are using svn externals, you’ll have to specify five externals:</para>
          <programlisting>https://github.com/transpect/calabash-frontend/trunk@38 calabash
https://github.com/transpect/calabash-distro/trunk@9 calabash/distro
https://github.com/transpect/rng-extension/trunk@10 calabash/extensions/transpect/rng-extension
https://github.com/transpect/unzip-extension/trunk@2 calabash/extensions/transpect/unzip-extension
https://github.com/transpect/image-props-extension/trunk@4 calabash/extensions/transpect/image-props-extension</programlisting>
          <para>Note that it is recommended to attach svn externals with a fixed revision number, at least in production.
          git submodules are fixed to a certain commit by default.</para>
        </annotation>
        <para>Let’s continue checking out some externals. We are probably going to validate the intermediate <link 
          xlink:href="https://github.com/le-tex/Hub">Hub XML</link> in our docx→Hub→JATS→EPUB pipeline. This RNG schema includes
        the <link xlink:href="https://github.com/le-tex/CSSa">CSSa</link> schema as a submodule.</para>
        <programlisting>git submodule add https://github.com/le-tex/Hub.git schema/hub
git submodule update --init --recursive</programlisting>
        <annotation>
          <para>In an svn project, you’d add two externals for this:</para>
          <programlisting>https://github.com/le-tex/Hub/trunk schema/Hub
https://github.com/le-tex/CSSa/trunk schema/Hub/css</programlisting>
          <para>Since it is not relevant for production and since newer releases of the schemas should be backward compatible,
        it is relatively safe to omit the fixed revision here.</para>
        </annotation>
        <programlisting>git submodule add https://github.com/transpect/schema-jats schema/jats
git submodule add https://github.com/transpect/schema-html schema/html
git submodule add https://github.com/transpect/docx2hub
git submodule add https://github.com/transpect/evolve-hub.git
git submodule add https://github.com/transpect/hub2html.git
git submodule add https://github.com/transpect/hub2bits.git hub2jats
git submodule add https://github.com/transpect/jats2html.git
git submodule add https://github.com/transpect/cascade.git
git submodule add https://github.com/transpect/htmlreports.git
git submodule add https://github.com/transpect/schematron.git
git submodule add https://github.com/transpect/epubtools.git
git submodule add https://github.com/transpect/epubcheck-idpf.git
git submodule add https://github.com/transpect/xslt-util.git
git submodule add https://github.com/transpect/xproc-util.git
</programlisting>
        <para>You’ll find individual descriptions of the modules in <xref linkend="part-modules"/>.</para>
        <para>Some of the modules you’ll need in almost every transpect project, some are vocabulary-specific (the ones
        that contain “jats” or “bits”) or input/output format specific (the ones that contain “docx”, “idml”, or “epub”).</para>
        <para>Commit the changes and push it to the upstream repository:</para>
        <programlisting>git commit -m "add submodules"
git push</programlisting>
        <para>This is the repository after commit <link xlink:href="https://github.com/transpect/docx2jats-demo/tree/2445f084fae5635bb1f32f3e47e33275d73a34d9">2445f08</link>.</para>
      </section>
      <section>
        <title>XML Catalog</title>
        <para>Each transpect module is known by a canonical URI (example: <literal>http:transpect.io/docx2hub/</literal>) 
          that may be used for importing their XSLT, XProc, images, or even for referring to fonts in CSS files. The
        mapping to actual files will be performed by a catalog resolver that needs to be configured by an XML Catalog. 
        The Calabash frontend script, 
          <link xlink:href="https://github.com/transpect/calabash-frontend/blob/master/calabash.bat">calabat.sh</link> or 
          <link xlink:href="https://github.com/transpect/calabash-frontend/blob/master/calabash.bat">calabash.bat</link>, will 
        read a catalog <literal>../xmlcatalog/catalog.xml</literal> by default. The catalog that you are going to create 
        will contain mostly <literal>nextCatalog</literal> that refer to the modules’ XML catalogs, at their relative locations
        in your project. In addition, you declare 
          <markup>&lt;rewriteURI uriStartString="http://this.transpect.io/" rewritePrefix="../"/&gt;</markup> to point to
        your project’s base directory. This is necessary for the configuration cascade that we’ll encounter later. By convention,
        all project-specific adaptations reside below <literal>http://this.transpect.io/a9s/</literal>.</para>
        <programlisting>mkdir xmlcatalog
 # (edit xmlcatalog/catalog.xml)
 git add xmlcatalog</programlisting>
        <para>We’ll get back to the last instruction in the catalog later 
          (<markup>&lt;nextCatalog catalog="content-repo.catalog.xml"/&gt;</markup>).</para>
        <para>If you are an <link xlink:href="https://www.oxygenxml.com/">oXygen</link> user, now is a good time to create
        a <literal>.xpr</literal> (oXygen project) file. In this file, you tell oXygen to use 
          <literal>${pdu}/calabash/xmlcatalog/catalog.xml</literal> as XML catalog.</para>
        <informalfigure>
          <mediaobject>
            <alt>oXygen XML catalog configuration</alt>
            <imageobject>
              <imagedata fileref="source/media/docx2jats-demo/catalog-xpr.png"/>
            </imageobject>
          </mediaobject>
        </informalfigure>
        <para>This will make oXygen use your project’s catalog by means of a <literal>nextCatalog</literal> instruction, in 
          the same way as Calabash uses your catalog. This will be helpful later because oXygen will be able to follow the
        canonical URIs.</para>
        <para>While you are at it, you should “Enable Master Files Support” for this oXygen project and add 
          <literal>docx2hub/xsl/main.xsl</literal> and <literal>evolve-hub/xsl/evolve-hub.xsl</literal>. We may need to
          add more files as we go. They are needed by oXygen in order to resolve variable/function/key/template declarations
          from other files than the currently edited or its imports. By doing so, you’ll benefit from oXygen’s XSLT checking
        capabilities that go far beyond syntax checks.</para>
        <programlisting>git add docx2jats-demo.xpr
git commit -m "add XML catalog, oXygen project"
git push</programlisting>
        <para>You may try the correct catalog resolution and oXygen configuration by Ctrl-clicking on 
          <literal>http://this.transpect.io/</literal> in the catalog. It should open the project’s base directory.</para>
        <para>With an update to a submodule that happened in the meantime, the repo at this stage looks like this: <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/tree/eabd9b6201e236af1042f0c60eb3b9bf97444169">eabd9b6</link></para>
      </section>
      <section>
        <title>Getting sample input</title>
        <para>Our friends at <link xlink:href="http://www.ulsp.eu/">University of Leipzig Sports Medicine</link> produce and
          publish an open access journal from Word files. Their desire to upload the articles to <link 
            xlink:href="http://www.ncbi.nlm.nih.gov/pmc/">PMC</link> made them ask us to provide a converter. Because our test
        system relies on svn front-end repos, we were unable to use it as a github-based demo project. But we can use their
        content. You can check it out from our <link 
          xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/ulsp/">svn server</link>:</para>
        <programlisting>mkdir ../content
svn co https://subversion.le-tex.de/common/transpect-demo/content/ulsp/ ../content/ulsp</programlisting>
        <para>or, for the time being, you can just save one of the 
          <literal>.docx</literal> files anywhere you want. Please be aware though
        that steps that we’ll introduce later (zipping the output and the images for PMC, …) rely on the 
          <literal>.docx</literal> files residing in a <literal>docx/</literal> directory. Also, for making use of the configuration
          cascade that lets you – in principle – override settings per article, the content has to be stored according to a certain 
          directory structure.</para>
      </section>
      <section>
        <title>A first pipeline</title>
        <para>By convention, the pipelines that are meant to be invoked directly (as opposed to pipelines that implement 
          the innards of a macroscopic step such as the ominous <literal>evolve-hub</literal>) reside in the directory 
          <literal>a9s/common/xpl</literal>. This is absolutely not necessary; they may reside anywhere within the project.</para>
        <para>Let’s create <literal>a9s/common/xpl/docx2jats.xpl</literal> and insert a basic pipeline: docx → flat Hub XML → JATS</para>
        <para>The commit is <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/tree/0e289b58a2978f334c2ced62f557627b1e7e9172">0e289b5</link>, 
        and the <link 
          xlink:href="https://github.com/transpect/docx2jats-demo/blob/0e289b58a2978f334c2ced62f557627b1e7e9172/a9s/common/xpl/docx2jats.xpl">pipeline 
          looks like this</link>. You’ll notice the <literal>p:import</literal> by canonical URI statements and the three essential
        steps, <literal>docx2hub:convert</literal>, <literal>hub:evolve-hub</literal>, and <literal>jats:hub2bits</literal> 
          (the odd naming is because the step will produce <link xlink:href="http://jats.nlm.nih.gov/extensions/bits/">BITS</link> 
          books instead of JATS articles if fed with a <literal>/dbk:book</literal> document).</para>
        <para>Invoke the transformation with the following statement on the command line (swapping <literal>.sh</literal>
        with <literal>.bat</literal> and probably also <literal>/</literal> with <literal>\</literal> on Windows machines 
        without <link xlink:href="https://cygwin.com/">Cygwin</link>):</para>
        <programlisting>calabash/calabash.sh a9s/common/xpl/docx2jats.xpl file=../content/ulsp/CSMI/CSMI_2014_701/docx/CSMI_2014_701.docx</programlisting>
        <para>You will see some garbage that faintly resembles JATS, but with all kinds of <literal>css:</literal> attributes
        and a <literal>dark-matter</literal> element instead of <literal>body</literal> or <literal>back</literal>. This
        is because the converter needs to know how to interpret the paragraph and character style names in the Word file.
        The main part of this transformation is done in <literal>evolve-hub</literal> that is a library for nesting list
          items according to indentation, hierarchizing sections whose names match ceertain regexes, grouping figures and
          tables with their captions, etc. <literal>evolve-hub</literal> is a toolbox (or a beast, according to other people)
        from which to configure multi-pass XSLT pipelines that up-convert 
          <link xlink:href="https://github.com/le-tex/Hub">Hub XML</link>, the flat DocBook derivative, to a more reasonable
        DocBook that may then be converted “sideways,” with significantly less XSLT passes, into JATS, for example. The 
          <literal>evolve-hub</literal> configuration that was applied to the input was a succession of XSLT modes defined
        in <link xlink:href="https://github.com/transpect/evolve-hub/blob/master/xpl/fallback.xpl#L210">fallback.xpl</link>,
        using default parameters/variables/templates/functions in XSLT.</para>
      </section>
      <section>
        <title>Dynamic transformation pipelines</title>
        <para>All the major steps that transform documents from one XML format to another XML format are implemented using the
          XProc step <link xlink:href="https://github.com/transpect/cascade/blob/master/xpl/dynamic-transformation-pipeline.xpl"
              ><literal>tr:dynamic-transformation-pipeline</literal></link>.</para>
        <para>It works like this:</para>
        <orderedlist>
          <listitem>
            <para>Consider the <literal>load</literal> option given to the step (for ex. <literal>evolve-hub/driver</literal>)</para>
          </listitem>
          <listitem>
            <para>In the configuration cascade, look for the most specific file with the name <literal>evolve-hub/driver.xpl</literal>. 
            This pipeline (or a fallback pipeline, if specified) will then be dynamically executed, using Calabash’s 
              <literal>cx:eval</literal> extension step.</para>
          </listitem>
          <listitem>
            <para>In the configuration cascade, look for the most specific file with the name <literal>evolve-hub/driver.xsl</literal>.
            This will be supplied to the pipeline on its stylesheet port. Typically a more specific stylesheet (for a journal) 
            will import a stylesheet from a less specific location (for an imprint).</para>
          </listitem>
        </orderedlist>
        <para>Apart from the primary input (<literal>source</literal> port) and the stylesheet, the dynamically loaded pipeline
        may get its options in a <literal>cx:options</literal> document and additional inputs on an <literal>additional-inputs</literal>
        port with <literal>sequence="true"</literal>. It will typically contain a sequence of XSLT passes, where each pass will transform
        its input in a given XSLT mode, using the same stylesheet. It may apply arbitrary XProc steps, though.</para>
        <para>XSLT has a nice import mechanism; in XProc, import is a different thing. There is no “inherit&amp;tweak” 
        mechanism for pipelines. Therefore, in order to avoid the redundancy of writing lots of fairly similar multi-XSLT-pass 
        pipelines, <literal>tr:dynamic-transformation-pipeline</literal> (or rather, <link 
          xlink:href="https://github.com/transpect/cascade/blob/master/xpl/load-cascaded.xpl"><literal>tr:load-cascaded</literal></link>)
        supports dynamic generation of the resource in question. So in the example above, if the dynamic loader is looking for
        <literal>evolve-hub/driver.xpl</literal> at a certain location and doesn’t find it there, it will also use an XSLT pipeline 
          <literal>evolve-hub/driver.xpl.xsl</literal> at that location, before it skips the location altogether and searches
        less specific locations. It will invoke, by convention, the <literal>main</literal> template of 
          <literal>evolve-hub/driver.xpl.xsl</literal>. This main template typically loads the pipeline 
          <literal>evolve-hub/driver.xpl</literal> from a less specific location (or from a sister journal) and transforms
          it, typically adding or removing XSLT steps in certain modes.</para>
      </section>
      <section>
        <title>Configuration Cascade</title>
        <para>The underlying concept is described in greater detail in <link 
          xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/le-tex/setup-manual/en/out/xhtml/transpect-setup.xhtml#sec-cascade">another 
          piece of documentation</link> that will eventually be integrated here. In brief, the content is organized 
        in <link xlink:href="https://en.wikipedia.org/wiki/Clade">clades</link> where the content items in each clade
        share configuration settings. Clades may be publishers, imprints, journals, book series, … It is also possible
        to have an own clade for each input type, e.g., <literal>.docx</literal> and <literal>.idml</literal>. However,
        this approach is problematic within a rigorous clade system as dicussed briefly at the end of 
          <link xlink:href="https://subversion.le-tex.de/common/transpect-demo/content/le-tex/setup-manual/en/out/xhtml/transpect-setup.xhtml#sec-cascade-clade-selection">this section</link>.</para>
        <para>There are two ways to determine which clade a given input file belongs to:</para>
        <itemizedlist>
          <listitem>
            <para>by file name parsing (example: <literal>CSMI_2014_701.docx → journal=CSMI, ms=701, ext=docx</literal>)</para>
          </listitem>
          <listitem>
            <para>by explicitly setting it as an option to the pipeline (example: <literal>clades="journal=CSMI MS=701"</literal>)</para>
          </listitem>
        </itemizedlist>
        <para>Without further ado, we’ll present you with the project’s clade configuration file, its filename parser
        customization and the resulting parameter set that contains the search paths in descending specificity.</para>
      </section>
    </chapter>
  </part>
</book>
